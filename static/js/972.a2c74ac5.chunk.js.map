{"version":3,"file":"static/js/972.a2c74ac5.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/ScrollUp/ScrollUpBtn.module.css?dda6","components/ScrollUp/ScrollUpBtn.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieSearch/MovieSearch.module.css?d7a7","pages/MovieSearch/MovieSearch.jsx","services/fetchApi.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ScrollUpBtn_btn__gQZOR\"};","import React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"components/ScrollUp/ScrollUpBtn.module.css\"\nexport const ScrollUpBtn = () => {\n    const [scrollUpBtn, setscrollUpBtn] = useState(false);\n    useEffect(() => {\n        window.addEventListener('scroll', () => {\n            if (window.scrollY > 100) {\n                setscrollUpBtn(true)\n            } else {\n                setscrollUpBtn(false)\n            }\n        })\n    }, [])\n    \n    const scrollUp = () => {\n        window.scrollTo({\n            top: 0,\n            behavior:\"smooth\"\n        })\n    }\n    return (\n    <>\n        {scrollUpBtn && (\n                <button className={styles.btn}\n                   \n                onClick={scrollUp}>^</button>     \n        )}\n        </>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"MovieSearch_form__D9lls\",\"input\":\"MovieSearch_input__CJqU8\",\"button\":\"MovieSearch_button__UXtWr\",\"item\":\"MovieSearch_item__vAVZS\",\"list\":\"MovieSearch_list__STSMH\",\"titleConteiner\":\"MovieSearch_titleConteiner__IwPdU\",\"titleText\":\"MovieSearch_titleText__MO-p-\",\"link\":\"MovieSearch_link__pOWmY\",\"voitAverege\":\"MovieSearch_voitAverege__b94tW\"};","import { useState, useEffect } from 'react';\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { fetchBySearch } from 'services/fetchApi';\nimport { Link, Outlet, useSearchParams, useLocation } from 'react-router-dom';\nimport { Loader } from '../../components/Loading/Loader';\nimport styles from '../MovieSearch/MovieSearch.module.css';\nimport { ButtonMore } from 'components/ButtonMore/ButtonMore';\nimport depositphotos from '../MovieSearch/depositphotos.jpg';\nimport noIMG from 'images/noIMG.jpg';\nimport { OverlayScrollbarsComponent } from \"overlayscrollbars-react\";\nimport { ScrollUpBtn } from 'components/ScrollUp/ScrollUpBtn';\n// import * as Scroll from 'react-scroll';\n\n\n\nconst MovieSearch = () => {\n  const [movies, setMovies] = useState([]);\n  const [serchParams, setSearchParams] = useSearchParams();\n  const [page, setPage] = useState(1);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [totalResults, setTotalResults] = useState(0);\n  const [fetching, setFetching]= useState(true)\n  // const [totalPages,settotalPages]=useState(20);\n\n  const location = useLocation();\n  const query = serchParams.get('moviename');\n\n\n  useEffect(() => {\n\n    if (!query) {\n      Notify.info('No movies found. Try again!');\n      return;\n    }\n    const fetchMoviesSearch = async () => {\n      try {\n        setLoading(true);\n        const response = await fetchBySearch(query, page);\n        const { results, total_pages, total_results } = response;\n         setMovies(results)\n        // setMovies([...movies, ...results]);\n        setTotalResults(total_results);\n        //  setPage(prevState => prevState + 1)\n        const totalPages = Math.ceil(total_pages / 20);\n        // if (results.length === 0) {\n        //   Notify.info('No images found. Please submit another query!');\n        //   return;\n        // }\n        if (page === totalPages) {\n          Notify.info(\"You've reached the end of search results.\");\n        }\n        if (page > 1) {\n          Notify.success(`Hooray! We found ${total_results} images.`);\n        }\n      } catch (error) {\n        setError('Ooops. Something went wrong...');\n      } finally {\n        setLoading(false);\n        // setFetching(false)\n      }\n    };\n   \n      fetchMoviesSearch();    \n  }, [query, page ]);\n\n  // useEffect(() => {\n  //   document.addEventListener('scroll', scrollHandler)\n\n  //   return function () {\n  //     document.removeEventListener('scroll', scrollHandler)\n  //   }\n  // }, [])\n  \n  // const scrollHandler = (e) => {\n  //   if (e.target.documentElement.scrollHeight - (e.target.documentElement.scrollTop + window.innerHeight) < 100\n  //   && movies.length < totalResults) {\n  //     setLoading(true)  \n  //     console.log('scroll')\n  //   }\n    \n    //   console.log('scrollHeight', e.target.documentElement.scrollHeight)\n    // console.log('scrollTop',e.target.documentElement.scrollTop);\n    //  console.log('inner', window.innerHeight)\n  // }\n  \n  const hendleFormSubmit = e => {\n    e.preventDefault();\n\n    const form = e.target;\n    setSearchParams({ moviename: form.elements.query.value.trim() });\n\n    form.reset();\n  };\n  const onLoadMore = () => {\n    setPage(prevNumber => prevNumber + 1);\n  };\n\n  const loadMovies = movies.length !== 0;\n  \n  const isLastPage = movies.length === totalResults;\n  \n   const loadMoreBtn = loadMovies && !loading && !isLastPage;\n  \n  return (\n    <>\n      <form className={styles.form} onSubmit={hendleFormSubmit}>\n        <input\n          className={styles.input}\n          name=\"query\"\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Look for your movie here\"\n        />\n        <button className={styles.button} type=\"submit\"></button>\n      </form>\n      {error && alert(error.message)}\n      {loading && <Loader />}\n\n      {loadMovies ? (\n        <>\n          {' '}\n          <ul className={styles.list}>\n            {movies.map(\n              ({\n                id,\n                title,\n                poster_path,\n                release_date,\n                vote_average,\n                original_title,\n              }) => {\n                return (\n                  <li key={id} className={styles.item}>\n                    <p className={styles.voitAverege}>{Math.ceil(vote_average)}</p>\n                     <div className={styles.info}>\n                    <Link className={styles.link} to={`/movie/${id}`} state={{ from: location }}>\n                      {poster_path !== null ? (\n                        <img\n                          src={`https://image.tmdb.org/t/p/w500${poster_path}`}\n                          alt={original_title}\n                        />\n                      ) : (\n                          <img src={noIMG} alt={original_title} style={{width: '100%'  , height:'auto' }}/>\n                      )}\n                      </Link>\n                      </div>\n                   <div className={styles.titleConteiner}>\n                    <h1 className={styles.titleText}>{title}</h1>\n                    <p className={styles.titleText}>{release_date}</p>\n                      </div>\n                    \n                  </li>\n                );\n              }\n            )}\n          </ul>\n          <ScrollUpBtn />\n          <Outlet />\n        </>\n      ) : (\n        <img\n          style={{\n            display: 'block',\n            margin: '10px auto',\n            width: 'auto',\n            height: 'auto',\n          }}\n          src={depositphotos}\n          alt=\"Let`s watch movies\"\n        />\n      )}\n      {/* {loadMoreBtn && <ButtonMore onLoadMore={onLoadMore} />}  */}\n    </>\n  );\n};\nexport default MovieSearch;\n","import axios from \"axios\";\n\nconst KEY = \"a1426f875d9b25aa0fd82fb82639d8ae\"\n\naxios.defaults.baseURL= 'https://api.themoviedb.org/3/'\n//?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\nexport async function fetchByTrending (page) {\n    const response = await axios('trending/movie/week',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page,\n        }    \n    })\n    return response.data;\n}\n \n\nexport async function fetchBySearch(query,page=1) {\n    const response = await axios('search/movie',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page:page,\n             query:`${query}`\n        }    \n    })\n    return response.data;\n}\n\nexport async function fetchMoviesById(movie_id) {\n    const response = await axios(`movie/${movie_id}`, {\n        params:\n        {\n          api_key: KEY,\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesByActors(movie_id) {\n    const response = await axios(`movie/${movie_id}/credits`, {\n        params:\n        {\n            api_key: KEY,   \n           // cast:[]\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesReviews(movie_id,page,results) {\n    const response = await axios(`movie/${movie_id}/reviews`, {\n        params:\n        {\n            api_key: KEY,   \n            results: [],\n            page:1,\n        }\n    })\n    return response.data.results;\n}\n"],"names":["ScrollUpBtn","useState","scrollUpBtn","setscrollUpBtn","useEffect","window","addEventListener","scrollY","className","styles","onClick","scrollTo","top","behavior","movies","setMovies","useSearchParams","serchParams","setSearchParams","page","error","setError","loading","setLoading","totalResults","setTotalResults","location","useLocation","query","get","fetchMoviesSearch","fetchBySearch","response","results","total_pages","total_results","totalPages","Math","ceil","Notify","loadMovies","length","onSubmit","e","preventDefault","form","target","moviename","elements","value","trim","reset","name","type","autoComplete","autoFocus","placeholder","alert","message","Loader","map","id","title","poster_path","release_date","vote_average","original_title","to","state","from","src","alt","noIMG","style","width","height","display","margin","depositphotos","KEY","fetchByTrending","axios","params","api_key","data","fetchMoviesById","movie_id","fetchMoviesByActors","fetchMoviesReviews"],"sourceRoot":""}