{"version":3,"file":"static/js/757.40b0fa91.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/ButtonMore/ButtonMore.module.css?ad63","components/ButtonMore/ButtonMore.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieSearch/MovieSearch.module.css?d7a7","pages/MovieSearch/MovieSearch.jsx","services/fetchApi.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"ButtonMore_button__YPyE-\"};","import styles from 'components/ButtonMore/ButtonMore.module.css'\nexport const ButtonMore = ({ onLoadMore }) => {\n  return (\n//  Math.ceil(images.totalHits / images.perPage) <= pageNumber\n        <button onClick={onLoadMore}\n      className={styles.button}\n      \n    >\n      <p>NEXT</p>\n    </button> \n)}","// extracted by mini-css-extract-plugin\nexport default {\"conteiner\":\"MovieSearch_conteiner__dTEa4\",\"form\":\"MovieSearch_form__D9lls\",\"input\":\"MovieSearch_input__CJqU8\",\"button\":\"MovieSearch_button__UXtWr\",\"list\":\"MovieSearch_list__STSMH\",\"item\":\"MovieSearch_item__vAVZS\",\"info\":\"MovieSearch_info__zBgQX\"};","import { useState, useEffect } from 'react';\nimport {toast} from 'react-toastify';\nimport { fetchBySearch } from 'services/fetchApi';\nimport { Link,Outlet,useSearchParams,useLocation } from 'react-router-dom';\nimport { Loader } from \"../../components/Loading/Loader\"\nimport styles from '../MovieSearch/MovieSearch.module.css'\nimport { ButtonMore } from 'components/ButtonMore/ButtonMore';\nimport depositphotos from '../MovieSearch/depositphotos.jpg'\n const MovieSearch = () => {\n    const [movies, setMovies] = useState([]);\n    const[serchParams, setSearchParams]=useSearchParams()\n    const [page, setPage] = useState(1);\nconst [error, setError] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [total, setTotal] = useState(0);\n\n    const location = useLocation()\n const query = serchParams.get('moviename')\n    \n    useEffect(() => {\n        if (!query) {\n            //   toast.info('No movies found. Try again!');\n              return\n          }\n       \n       const fetchMoviesSearch = async () => {\n        try {\n            setLoading(true);\n           const response = await fetchBySearch(query, page) \n     const  { results, total_pages, total_results }=response;\n          setMovies(results)\n          setTotal(total_results)\n    console.log('response',response)\n            const totalPages = Math.ceil(total_pages / 20);\n          if (results.length === 0) {\n            toast.info('No images found. Please submit another query!');\n          return\n          }\n           if (page === totalPages) {\n         toast(\"You've reached the end of search results.\");\n           }\n        //   if (page === 1) {\n        //    toast.success(`Hooray! We found ${total_results} images.`);\n        //   }\n         }  \n            catch(error) {\n                setError('Ooops. Something went wrong...')\n       }     \n           finally {\n        setLoading(false);\n      } \n    }\nfetchMoviesSearch()\n    }, [query,page])\n            \nconst hendleFormSubmit = e => {\n    e.preventDefault();\n    // if (query === null || query === '') {\n    //     return\n    // } \n    const form = e.target\nsetSearchParams({ moviename:form.elements.query.value.trim()})\n    form.reset()\n    }\n    const onLoadMore = () => {\n        setPage(prevNumber => prevNumber + 1)\n    }  \n    \n     const loadMovies = movies.length !== 0;\n //console.log('loadImages',loadMovies)\n  const isLastPage = movies.length === total;\n  //console.log('isLastPage',isLastPage)\n  const loadMoreBtn =loadMovies &&  !loading && !isLastPage;\n  //console.log('loadMoreBtn',loadMoreBtn)\n\n    return (\n        <>     \n        <form className={styles.form} onSubmit={hendleFormSubmit}>\n                <input\n                    className={styles.input}\n                    //onChange={hendelChengeInput}\n                    //value={query}\n                    name='query'\n                    type=\"text\" \n      autoComplete=\"off\"\n      autoFocus\n      placeholder=\"Look for your movie here\"/>\n             <button className={styles.button} type=\"submit\"></button>\n            </form>\n            {error && alert(error.message)}\n        {loading && <Loader />} \n    \n         \n      \n            {loadMovies ? (\n               <> <ul className={styles.list}>\n                  {movies.map(({ id, title, poster_path, release_date, vote_average,original_title }) => {\n                    return (\n                    < li key={id} className={styles.item}>\n                            <p className={styles.reiting}>{vote_average}</p>\n                             <Link to={`/movie/${id}`} state={{ from: location }}><img src={`https://image.tmdb.org/t/p/w500${poster_path}`} alt={original_title} /> </Link> \n                        <div className={styles.info}>    \n                             <h1 className={styles.title}>{title}</h1>\n                        <p className={styles.realase}>{release_date}</p>\n                            </div>\n                    </li>    \n                    )    \n                  })}\n                   \n                </ul >\n                   {loadMoreBtn &&<ButtonMore onLoadMore={onLoadMore}/>}\n                    <Outlet/>\n</> \n            )\n:  <img\n             style={{\n        display: 'block',\n        margin: \"10px auto\",\n        width: 'auto',\n       height: \"auto\",\n      }}\n            src={depositphotos} alt=\"Let`s watch movies\" />}\n            \n        </>\n    )\n}\nexport default MovieSearch;","import axios from \"axios\";\n\nconst KEY = \"a1426f875d9b25aa0fd82fb82639d8ae\"\n\naxios.defaults.baseURL= 'https://api.themoviedb.org/3/'\n//?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\nexport async function fetchByTrending (page) {\n    const response = await axios('trending/movie/week',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page,\n        }    \n    })\n    return response.data;\n}\n \n\nexport async function fetchBySearch(query) {\n    const response = await axios('search/movie',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page:1,\n             query:`${query}`\n        }    \n    })\n    return response.data;\n}\n\nexport async function fetchMoviesById(movie_id) {\n    const response = await axios(`movie/${movie_id}`, {\n        params:\n        {\n          api_key: KEY,\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesByActors(movie_id) {\n    const response = await axios(`movie/${movie_id}/credits`, {\n        params:\n        {\n            api_key: KEY,   \n           // cast:[]\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesReviews(movie_id,page,results) {\n    const response = await axios(`movie/${movie_id}/reviews`, {\n        params:\n        {\n            api_key: KEY,   \n            results: [],\n            page:1,\n        }\n    })\n    return response.data.results;\n}\n"],"names":["ButtonMore","onLoadMore","onClick","className","styles","useState","movies","setMovies","useSearchParams","serchParams","setSearchParams","page","setPage","error","setError","loading","setLoading","total","setTotal","location","useLocation","query","get","useEffect","fetchMoviesSearch","fetchBySearch","response","results","total_pages","total_results","console","log","totalPages","Math","ceil","length","toast","loadMovies","isLastPage","loadMoreBtn","onSubmit","e","preventDefault","form","target","moviename","elements","value","trim","reset","name","type","autoComplete","autoFocus","placeholder","alert","message","Loader","map","id","title","poster_path","release_date","vote_average","original_title","to","state","from","src","alt","prevNumber","style","display","margin","width","height","depositphotos","KEY","fetchByTrending","axios","params","api_key","data","fetchMoviesById","movie_id","fetchMoviesByActors","fetchMoviesReviews"],"sourceRoot":""}