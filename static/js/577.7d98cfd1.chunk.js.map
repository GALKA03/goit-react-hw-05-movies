{"version":3,"file":"static/js/577.7d98cfd1.chunk.js","mappings":"yNA0DA,UApDyB,WACzB,IAAMA,GAAUC,EAAAA,EAAAA,MAAVD,SAEF,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACF,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KAuBE,OArBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,gHAGaC,EAAAA,EAAAA,IAAoBT,GAHjC,OAGJU,EAHI,OAIJC,EAAMD,EAASP,KACrBC,EAAQO,GALE,gDAYlBL,EAAS,kCAZS,yDAAH,qDAgBfE,GACH,GAAC,CAACR,IAICG,IACI,gCACME,GAASO,MAAMP,EAAMQ,UACvB,wBACEV,EAAKW,KAAI,YAAoD,IAAlDC,EAAiD,EAAjDA,GAAGC,EAA8C,EAA9CA,aAAaC,EAAiC,EAAjCA,cAAcC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,UAC9C,OACG,2BACK,gBAAKC,IAAG,0CAAqCJ,GAAgBK,IAAKJ,KAClE,4BACI,wBAAKC,KACL,uBAAIC,SAJJJ,EASZ,OAGL,SAAC,KAAD,MAKZ,C,8LCvDKO,EAAM,mCAIL,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,wFACoBC,EAAAA,EAAAA,GAAM,sBAAsB,CAC/CC,OACA,CACGC,QAASL,EACRM,YAAa,GACbJ,KAAAA,KANL,cACGd,EADH,yBASIA,EAASmB,MATb,kEAaA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA6BC,GAA7B,4FAAmCP,EAAnC,+BAAwC,EAAxC,UACoBC,EAAAA,EAAAA,GAAM,eAAe,CACxCC,OACA,CACGC,QAASL,EACRM,YAAa,GACbJ,KAAKA,EACJO,MAAM,GAAD,OAAIA,MAPf,cACGrB,EADH,yBAUIA,EAASmB,MAVb,mEAaA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,wFACoBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,GAAY,CAC9CP,OACA,CACEC,QAASL,KAJZ,cACGZ,EADH,yBAOIA,EAASmB,MAPb,kEAUA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAAmCwB,GAAnC,wFACoBR,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACtDP,OACA,CACIC,QAASL,KAJd,cACGZ,EADH,yBAQIA,EAASmB,MARb,kEAWA,SAAeK,EAAtB,mDAAO,OAAP,oBAAO,WAAkCD,EAAST,EAAKW,GAAhD,wFACoBV,EAAAA,EAAAA,GAAM,SAAD,OAAUQ,EAAV,YAA8B,CACtDP,OACA,CACIC,QAASL,EACTa,QAAS,GACTX,KAAK,KANV,cACGd,EADH,yBASIA,EAASmB,KAAKM,SATlB,kEAjDPV,EAAAA,EAAAA,SAAAA,QAAwB,+B","sources":["pages/MovieActorsPage/MovieActorsPage.jsx","services/fetchApi.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\n//import { UseFetchActors } from \"../hooks/UseFetchByActors\"\nimport { Outlet } from \"react-router-dom\"\nimport { useParams } from \"react-router-dom\";\nimport{fetchMoviesByActors} from \"../../services/fetchApi\"\n\n const MovieActorsPage = () => {\nconst{moviesId}=useParams()\n\n    const [cast, setCast] = useState([]);\n  const [error, setError] = useState(null);\n// const location = useLocation();\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n            //  setLoading(true);\n                const response = await fetchMoviesByActors(moviesId)\n                const arr = response.cast\n                setCast(arr)\n                // const arr = cast.filter(elem => {\n                //     return arr\n                // })\n               // console.log('response',response.cast)\n        }\n         catch(error){\n        setError('Ooops. Something went wrong...')\n            } \n    \n     }   \n        fetchCast()\n    },[moviesId])\n    \n   \n    return (\n        cast && (\n            <>\n                 {error && alert(error.message)}\n                <ul>\n                 {cast.map(({id,profile_path,original_name,name,character}) =>{\n                  return (\n                     <li key={id}>\n                          <img src={`https://image.tmdb.org/t/p/w500/${profile_path}`} alt={original_name} /> \n                          <div>\n                              <h1>{name}</h1> \n                              <p>{character}</p> \n                         </div>\n                               \n                </li> \n                  )   \n                 })   \n}            \n            </ul>\n             <Outlet /> \n            </>\n     )   \n      \n   ) \n}\nexport default MovieActorsPage;","import axios from \"axios\";\n\nconst KEY = \"a1426f875d9b25aa0fd82fb82639d8ae\"\n\naxios.defaults.baseURL= 'https://api.themoviedb.org/3/'\n//?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\nexport async function fetchByTrending (page) {\n    const response = await axios('trending/movie/week',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page,\n        }    \n    })\n    return response.data;\n}\n \n\nexport async function fetchBySearch(query,page=1) {\n    const response = await axios('search/movie',{\n        params:\n        {\n           api_key: KEY,\n            total_pages: 20,\n            page:page,\n             query:`${query}`\n        }    \n    })\n    return response.data;\n}\n\nexport async function fetchMoviesById(movie_id) {\n    const response = await axios(`movie/${movie_id}`, {\n        params:\n        {\n          api_key: KEY,\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesByActors(movie_id) {\n    const response = await axios(`movie/${movie_id}/credits`, {\n        params:\n        {\n            api_key: KEY,   \n           // cast:[]\n        }\n    })\n    return response.data;\n}\n\nexport async function fetchMoviesReviews(movie_id,page,results) {\n    const response = await axios(`movie/${movie_id}/reviews`, {\n        params:\n        {\n            api_key: KEY,   \n            results: [],\n            page:1,\n        }\n    })\n    return response.data.results;\n}\n"],"names":["moviesId","useParams","useState","cast","setCast","error","setError","useEffect","fetchCast","fetchMoviesByActors","response","arr","alert","message","map","id","profile_path","original_name","name","character","src","alt","KEY","fetchByTrending","page","axios","params","api_key","total_pages","data","fetchBySearch","query","fetchMoviesById","movie_id","fetchMoviesReviews","results"],"sourceRoot":""}